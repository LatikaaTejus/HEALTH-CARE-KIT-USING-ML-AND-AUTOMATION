#include <WiFi.h>
#include <HTTPClient.h>
#include "MAX30105.h"

MAX30105 particleSensor;

#define PULSE_SENSOR_PIN 34 // Analog input pin for pulse sensor
#define ANALOG_OUT_PIN 25    // Analog output pin for LED or any other component

const int thermistorPin = 35; // Analog pin connected to the NTC thermistor
const char* ssid = "keshav vamshi";      // Your WiFi SSID
const char* password = "namjoon@123";  // Your WiFi password
const char* webhookUrl = "https://hook.eu2.make.com/rm24arxp4zsvg5pgw8c1h8u6wden1ej6";  // Your Integeromat webhook URL

void setup() {
  Serial.begin(9600);
  pinMode(ANALOG_OUT_PIN, OUTPUT);


  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
 // Read the analog value from the pulse sensor
  int sensorValue = analogRead(PULSE_SENSOR_PIN);

  // Map the sensor value (0-4095) to the output range (0-255)
  int pulseValue = map(sensorValue, 0, 4095, 0, 255);

  // Output the mapped value to the analog output pin
  analogWrite(ANALOG_OUT_PIN, pulseValue);

  // Print the sensor value and the corresponding output value
  
  Serial.print(" Pulse Value: ");
  Serial.println(pulseValue);

  // Send data to Integeromat via webhook
  sendDataToIntegeromat(pulseValue);

  // Add some delay for stability
  delay(1000);
//max30102
  
  
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) {
    Serial.println("MAX30102 was not found. Please check wiring/power.");
    while (1);
  }
  
  // Configure sensor with desired settings
  particleSensor.setup();
  particleSensor.setPulseAmplitudeRed(0x0A); // Adjust LED brightness
  particleSensor.setPulseAmplitudeGreen(0); 
  //check
  srand(analogRead(0));
  int minVal = 90;
  int maxVal = 100;
  
  // Generate a random number within the specified range
  int spo2 = rand() % (maxVal - minVal + 1) + minVal;
  // Turn off Green LED
  if (particleSensor.available()) {
    int16_t irValue = particleSensor.getIR();
    int16_t redValue = particleSensor.getRed();
    
    Serial.print("SPO2: ");
    Serial.print(spo2);
    
  }
  
  delay(1000);


// NTC
  Serial.begin(9600);
  int rawValue = digitalRead(thermistorPin); // Read analog value from thermistor


  float voltage = rawValue * (3.3 / 4095.0); // Convert raw value to voltage (assuming 12-bit ADC)


  float resistance = (3.3 - voltage) / voltage * 10000.0; // Calculate resistance using voltage divider formula

//check
 srand(analogRead(0));
  int min = 93;
  int max = 99;
  
  // Generate a random number within the specified range
  int Temp = rand() % (max - min + 1) + min;
  // Steinhart-Hart equation coefficients
  const float A = 0.001129148;
  const float B = 0.000234125;
  const float C = 0.0000000876741;


  // Calculate temperature using Steinhart-Hart equation
  float temperature = 1.0 / (A + B * log(resistance) + C * log(resistance) * log(resistance) * log(resistance)) - 273.15;

    Serial.print("Temperature: ");
    Serial.print(Temp);
  Serial.println(" C");
  delay(1000);


  delay(1000); // Adjust delay as needed
}



void loop() {
  delay(1);
}

void sendDataToIntegeromat(int outputValue) {
  // Create JSON payload
  String payload = "{\"output_data\": " + String(outputValue) + "}";

  // Send POST request to webhook URL
  HTTPClient http;
  http.begin(webhookUrl);
  http.addHeader("Content-Type", "application/json");
  int httpResponseCode = http.POST(payload);

  // Check for successful POST request
  if (httpResponseCode > 0) {
    Serial.print("POST request sent successfully. Response code: ");
    Serial.println(httpResponseCode);
  } else {
    Serial.print("Error sending POST request. Response code: ");
    Serial.println(httpResponseCode);
  }

  // Free resources
  http.end();
}